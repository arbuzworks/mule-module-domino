/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.domino;

import java.util.Map;

import lotus.domino.Database;
import lotus.domino.Document;
import lotus.domino.DxlExporter;
import lotus.domino.DxlImporter;
import lotus.domino.NotesException;
import lotus.domino.NotesFactory;
import lotus.domino.RichTextItem;
import lotus.domino.RichTextParagraphStyle;
import lotus.domino.Session;
import lotus.domino.View;
import lotus.domino.ViewEntry;
import lotus.domino.ViewEntryCollection;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mule.module.domino.util.TransformUtil;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

@Connector(namespacePrefix = "domino")
public class DominoCloudConnector {
	private transient Log logger = LogFactory.getLog(getClass());

	/**
	 * Domino host
	 */
	@Property
	private String host;

	/**
	 * Domino port
	 */
	@Property
	private String port;

	/**
	 * Get a domino host
	 * 
	 * @return
	 */
	public String getHost() {
		return host;
	}

	/**
	 * Specify the domino host
	 * 
	 * @param host
	 */
	public void setHost(String host) {
		this.host = host;
	}

	/**
	 * Get a domino port
	 * 
	 * @return
	 */
	public String getPort() {
		return port;
	}

	/**
	 * Specify the domino port
	 * 
	 * @param port
	 */
	public void setPort(String port) {
		this.port = port;
	}

	/**
	 * Create Domino document
	 * 
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param properties
	 * @return
	 * @throws NotesException
	 */
	@Operation
	public String create(String user, String password, String serverName,
			String databaseName,
			@Parameter(optional = true) Map<String, Object> properties)
			throws NotesException {
		logger.trace("create");

		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			Document document = database.createDocument();

			if (properties != null)
				TransformUtil.mapToDocument(database, properties, document);

			if (document.save())
				return document.getUniversalID();
			else
				return null;
		} finally {
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Read Domino document
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param id
	 * @return
	 * @throws NotesException
	 */
	@Operation
	public Document read(String user, String password, String serverName,
			String databaseName, String id) throws NotesException {
		logger.trace("read");
		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			Document document = database.getDocumentByUNID(id);
			return document;
		} finally {
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Read Domino DXL document
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param id
	 * @return
	 * @throws NotesException
	 */
	@Operation
	public String readDxl(String user, String password, String serverName,
			String databaseName, String id) throws NotesException {
		logger.trace("read");

		String dxl = null;
		Database database = null;
		DxlExporter ixp = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			Document document = database.getDocumentByUNID(id);			
			ixp = database.getParent().createDxlExporter();
			ixp.setOutputDOCTYPE(false);
			ixp.setForceNoteFormat(false);
			dxl = ixp.exportDxl(document);
			return dxl;
		} finally {
			if (ixp != null)
				ixp.recycle();
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Update Domino document
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param id
	 * @param properties
	 * @return
	 * @throws NotesException
	 */
	@Operation
	public String update(String user, String password, String serverName,
			String databaseName, String id, Map<String, Object> properties)
			throws NotesException {
		logger.trace("update");

		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			if (id != null) {
				Document document = database.getDocumentByUNID(id);

				if (properties != null)
					TransformUtil.mapToDocument(database, properties, document);

				if (document.save())
					return document.getUniversalID();
				else
					return null;
			}

			return null;
		} finally {
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Delete Domino document
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param id
	 * @return
	 * @throws NotesException
	 */
	@Operation
	public boolean delete(String user, String password, String serverName,
			String databaseName, String id) throws NotesException {
		logger.trace("delete");

		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			Document document = database.getDocumentByUNID(id);

			if (document == null)
				return false;

			return document.remove(true);
		} finally {
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Import DXL document into Domino
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param dxl
	 * @param aclImportOption
	 * @param designImportOption
	 * @param documentImportOption
	 * @param inputValidationOption
	 * @param unknownTokenLogOption
	 * @param logComment
	 * @param createFTIndex
	 * @param exitOnFirstFatalError
	 * @param replaceDbProperties
	 * @param replicaRequiredForReplaceOrUpdate
	 * @throws NotesException
	 */
	@Operation
	public void importDxl(
			String user,
			String password,
			String serverName,
			String databaseName,
			String dxl,
			@Parameter(optional = true) Integer aclImportOption,
			@Parameter(optional = true) Integer designImportOption,
			@Parameter(optional = true) Integer documentImportOption,
			@Parameter(optional = true) Integer inputValidationOption,
			@Parameter(optional = true) Integer unknownTokenLogOption,
			@Parameter(optional = true) String logComment,
			@Parameter(optional = true) Boolean createFTIndex,
			@Parameter(optional = true) Boolean exitOnFirstFatalError,
			@Parameter(optional = true) Boolean replaceDbProperties,
			@Parameter(optional = true) Boolean replicaRequiredForReplaceOrUpdate)
			throws NotesException {
		logger.trace("import");

		Database database = null;
		DxlImporter imp = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			imp = database.getParent().createDxlImporter();

			if (replaceDbProperties != null)
				imp.setReplaceDbProperties(replaceDbProperties);
			if (documentImportOption != null)
				imp.setDocumentImportOption(documentImportOption);
			if (aclImportOption != null)
				imp.setAclImportOption(aclImportOption);
			if (createFTIndex != null)
				imp.setCreateFTIndex(createFTIndex);
			if (designImportOption != null)
				imp.setDesignImportOption(designImportOption);
			if (exitOnFirstFatalError != null)
				imp.setExitOnFirstFatalError(exitOnFirstFatalError);
			if (inputValidationOption != null)
				imp.setInputValidationOption(inputValidationOption);
			if (logComment != null)
				imp.setLogComment(logComment);
			if (replicaRequiredForReplaceOrUpdate != null)
				imp.setReplicaRequiredForReplaceOrUpdate(replicaRequiredForReplaceOrUpdate);
			if (unknownTokenLogOption != null)
				imp.setUnknownTokenLogOption(unknownTokenLogOption);

			imp.importDxl(dxl, database);
		} finally {
			if (imp != null)
				imp.recycle();
			closeSessionAndDatabase(database);
		}
	}

	/**
	 * Find document by query
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param query
	 * @return Domino document
	 * @throws NotesException
	 */
	@Operation
	public Document find(String user, String password, String serverName,
			String databaseName, String query) throws NotesException {
		logger.trace("find");

		Document document = null;
		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);
			View v = database.createView("", query);
			ViewEntryCollection vc = v.getAllEntries();
			ViewEntry entry = vc.getFirstEntry();
			while (entry != null) {

				if (entry.isDocument()) {
					document = entry.getDocument();
					break;
				} else {
					entry.recycle();
				}

				entry = vc.getNextEntry();
			}

			v.recycle();
			vc.recycle();
		} finally {
			closeSessionAndDatabase(database);
		}

		return document;
	}
	
	/**
	 * Find DXL by query
	 * 
	 * @param user
	 * @param password
	 * @param serverName
	 * @param databaseName
	 * @param query
	 * @return Domino document
	 * @throws NotesException
	 */
	@Operation
	public String findDxl(String user, String password, String serverName,
			String databaseName, String query) throws NotesException {
		logger.trace("find dxl");

		String dxl = null;
		Document document = null;
		Database database = null;
		try {
			database = openSessionAndDatabase(user, password, serverName,
					databaseName);

			View v = database.createView("", query);
			ViewEntryCollection vc = v.getAllEntries();
			ViewEntry entry = vc.getFirstEntry();
			while (entry != null) {

				if (entry.isDocument()) {
					document = entry.getDocument();
					break;
				} else {
					entry.recycle();
				}

				entry = vc.getNextEntry();
			}

			v.recycle();
			vc.recycle();

			if (document != null) {
				DxlExporter ixp = null;
				try {
					ixp = database.getParent().createDxlExporter();
					ixp.setOutputDOCTYPE(false);
					ixp.setForceNoteFormat(false);
					dxl = ixp.exportDxl(document);
				} finally {
					document.recycle();
					if (ixp != null)
						ixp.recycle();
				}
			}
		} finally {

			closeSessionAndDatabase(database);
		}
		return dxl;
	}
	
	Database openSessionAndDatabase(String user, String password,
			String serverName, String databaseName) throws NotesException {

		Session session = NotesFactory.createSession(host + ":" + port, user,
				password);
		Database database = session.getDatabase(serverName, databaseName);
		return database;
	}

	void closeSessionAndDatabase(Database database) throws NotesException {
		if (database != null) {
			Session session = database.getParent();
			database.recycle();
			session.recycle();
		}
	}
	
	RichTextParagraphStyle headerStyle(Session s) {
	    RichTextParagraphStyle r=null;
	    try {
	      r = s.createRichTextParagraphStyle();
	      r.setAlignment(RichTextParagraphStyle.ALIGN_CENTER);
	      r.setPagination
	       (RichTextParagraphStyle.PAGINATE_KEEP_WITH_NEXT);
	      r.setSpacingAbove
	        (RichTextParagraphStyle.SPACING_SINGLE);
	      r.setSpacingBelow(
	        RichTextParagraphStyle.SPACING_DOUBLE);
	      
	    } catch(Exception e) {
	      e.printStackTrace();
	    }
	    
	    return r;
	  }
	  
	  RichTextParagraphStyle bodyStyle(Session s) {
	    RichTextParagraphStyle r=null;
	    try {
	      r = s.createRichTextParagraphStyle();
	      r.setAlignment(RichTextParagraphStyle.ALIGN_LEFT);
	      r.setSpacingAbove(RichTextParagraphStyle.SPACING_SINGLE);
	      r.setSpacingBelow
	      (RichTextParagraphStyle.SPACING_ONE_POINT_50);
	      r.setInterLineSpacing(RichTextParagraphStyle.SPACING_SINGLE);
	      r.setLeftMargin(RichTextParagraphStyle.RULER_ONE_INCH);
	      r.setFirstLineLeftMargin
	      ((int)(RichTextParagraphStyle.RULER_ONE_INCH * 1.5));
	      r.setRightMargin(0);
	      
	    } catch(Exception e) {
	      e.printStackTrace();
	    }
	    
	    return r;
	  }
}
