/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.domino;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import lotus.domino.Database;
import lotus.domino.Document;
import lotus.domino.DxlImporter;
import lotus.domino.NotesException;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mule.api.lifecycle.InitialisationException;

public class DominoTestCase {
	private static DominoCloudConnector dominoConnector;
	private static DocumentBuilderFactory builderFactory;
	private static String user;
	private static String password;
	private static String serverName;
	private static String databaseName;
	private static Database database;
	
	private static String dxlDocPattern = "<?xml version='1.0'?>"
			+ "<document xmlns='http://www.lotus.com/dxl' version='8.5' %s> %s</document>";
	private static String dxlItemPattern = "<item name='%3$s'><%1$s>%2$s</%1$s></item>";
	private static SimpleDateFormat sd = new SimpleDateFormat(
			"yyyyMMdd'T'HHmmss',00'Z");

	@BeforeClass
	public static void initialise() throws IOException,
			InitialisationException, ParserConfigurationException, NotesException {
		Properties properties = new Properties();

		InputStream propertiesFile = DominoTestCase.class.getClassLoader()
				.getResourceAsStream("test.properties");
		properties.load(propertiesFile);

		user = properties.getProperty("user");
		password = properties.getProperty("password");
		String host = properties.getProperty("host");
		String port = properties.getProperty("port");
		serverName = properties.getProperty("servername");
		databaseName = properties.getProperty("databasename");

		dominoConnector = new DominoCloudConnector();
		dominoConnector.setHost(host);
		dominoConnector.setPort(port);

		builderFactory = DocumentBuilderFactory.newInstance();
		builderFactory
				.setFeature(
						"http://apache.org/xml/features/nonvalidating/load-external-dtd",
						false);
		builderFactory.setValidating(false);
		builderFactory.setNamespaceAware(false);
		builderFactory.setExpandEntityReferences(false);
		
		database = dominoConnector.openSessionAndDatabase(user, password, serverName, databaseName);
	}

	@AfterClass
	public static void dispose() throws NotesException {
		if (database != null && dominoConnector != null) {
			dominoConnector.closeSessionAndDatabase(database);
		}
	}
	
	private Map<String, Object> createTestPayload() {
		Map<String, Object> document = new HashMap<String, Object>();

		document.put("Form", "Appointment");
		document.put("Chair", "User1");
		document.put("AltChair", "User1");
		document.put("$PublicAccess", "1");

		Date now = new Date();

		document.put("STARTDATETIME", now);
		document.put("EndDateTime", now);
		document.put("CalendarDateTime", now);
		document.put("RepeatDates", now);
		document.put("RepeatInstanceDates", now);
		document.put("RepeatEndDates", now);
		document.put("Subject", "My Test Meeting");
		document.put("StartTimeZone", new String("Z=-3005$DO=0$ZX=35$ZN=India"));
		document.put("EndTimeZone", new String("Z=-3005$DO=0$ZX=35$ZN=India"));
		document.put("AppointmentType", "0");
		document.put("MeetingType", "1");
		document.put("RepeatUnit", "D");
		document.put("RepeatHow", "U");
		document.put("RepeatUntil", now);
		document.put("RepeatForUnit", "D");
		document.put("RepeatWeekends", "D");
		document.put("Repeats", "1");

		document.put("RepeatStartDate", now);
		document.put("RepeatEndDate", now);
		document.put("lastDate", now);
		document.put("RepeatInterval", "1");
		document.put("$NoPurge", now);
		document.put("RepeatAdjust", "");
		document.put("RepeatFromEnd", "");
		document.put("RepeatFor", "2");
		document.put("_ViewIcon", 160);
		document.put("OrgTable", "CO");
		document.put("$HFFlags", "1");
		document.put("SchedulerSwitcher", "1");
		document.put("SequenceNum", 1);
		document.put("UpdateSeq", 1);

		return document;
	}

	@Test
	public void crud() throws NotesException {
		Map<String, Object> properties = createTestPayload();
		String id = dominoConnector.create(user, password, serverName, databaseName, properties);
		assertNotNull(id);

		Document document = dominoConnector.read(user, password, serverName, databaseName, id);
		assertNotNull(document);

		properties = new HashMap<String, Object>();
		properties.put("Subject", "UPDATED at " + new Date());

		String updateId = dominoConnector.update(user, password, serverName, databaseName, id, properties);
		assertNotNull(updateId);
		assertEquals(id, updateId);

		boolean result = dominoConnector.delete(user, password, serverName, databaseName, id);
		assertTrue(result);
	}

	@Test
	public void importDxl() throws Exception {
		String dxlNewDoc = generateDxl(createTestPayload());

		// create
		dominoConnector.importDxl(user, password, serverName, databaseName, dxlNewDoc, null, null,
				DxlImporter.DXLIMPORTOPTION_CREATE, null, null, null, null,
				null, null, null);

		// test of creation
		Document d = dominoConnector.find(user, password, serverName, databaseName, "Subject='My Test Meeting'");
		assertNotNull(d);

		// read
		String justCreatedDxlDocument = dominoConnector.readDxl(user, password, serverName, databaseName, d.getUniversalID());
		assertNotNull(justCreatedDxlDocument);
System.out.println("DXL: " + justCreatedDxlDocument);
		// update
		String updatedDxlDocument = justCreatedDxlDocument.replaceAll(
				"My Test Meeting", "Changed My Test Meeting");
		dominoConnector.importDxl(user, password, serverName, databaseName, updatedDxlDocument, null, null,
				DxlImporter.DXLIMPORTOPTION_UPDATE_ELSE_IGNORE, null, null,
				null, null, null, false, null);

		// test of updating
		d = dominoConnector.find(user, password, serverName, databaseName, "Subject='Changed My Test Meeting'");
		assertNotNull(d);
		
		String dxl = dominoConnector.findDxl(user, password, serverName, databaseName, "Subject='Changed My Test Meeting'");
		assertNotNull(dxl);

		// delete
		dominoConnector.delete(user, password, serverName, databaseName, d.getUniversalID());

		// test of deletion
		d = dominoConnector.find(user, password, serverName, databaseName, "Subject='Changed My Test Meeting'");	
		assertNull(d);

		dxl = dominoConnector.findDxl(user, password, serverName, databaseName, "Subject='Changed My Test Meeting'");
		assertNull(dxl);
	}

	private String generateDxl(Map<String, Object> docItems) {

		StringBuilder sb = new StringBuilder();
		String formValue = null;
		for (Map.Entry<String, Object> item : docItems.entrySet()) {
			String name = item.getKey();
			Object obj = item.getValue();
			if ("form".equalsIgnoreCase(name)) {
				formValue = "" + obj;
			} else {
				String type = "text";
				String value = "";
				if (obj instanceof Date) {
					type = "datetime";
					value = sd.format((Date) obj).substring(0, 21);
				} else if (obj instanceof Number) {
					type = "number";
					value = "" + obj;
				} else {
					value = "" + obj;
				}
				sb.append(String.format(dxlItemPattern, type, value, name)
						+ "\n");
			}

		}

		return String.format(dxlDocPattern, formValue != null ? "form='"
				+ formValue + "'" : "", sb.toString());
	}
}
